"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const github_1 = require("@actions/github");
const core_1 = require("@actions/core");
const { GITHUB_TOKEN, GITHUB_SHA, GITHUB_WORKSPACE } = process.env;
const ACTION_NAME = 'ESLint';
const EXTENSIONS = new Set(['.ts', '.js']);
async function lint(files) {
    const { CLIEngine } = await Promise.resolve().then(() => require(path_1.join(process.cwd(), 'node_modules/eslint')));
    const cli = new CLIEngine({
        extensions: [...EXTENSIONS],
        ignorePath: '.gitignore'
    });
    const report = cli.executeOnFiles(files || ['src']);
    const { results, errorCount, warningCount } = report;
    const levels = ['notice', 'warning', 'failure'];
    const annotations = [];
    const consoleOutput = [];
    const consoleLevels = [, 'warning', 'error'];
    for (const res of results) {
        const { filePath, messages } = res;
        const path = filePath.substring(GITHUB_WORKSPACE.length + 1);
        for (const msg of messages) {
            const { line, endLine, column, endColumn, severity, ruleId, message } = msg;
            const annotationLevel = levels[severity];
            const consoleLevel = consoleLevels[severity];
            annotations.push({
                path,
                start_line: line,
                end_line: endLine || line,
                start_column: column,
                end_column: endColumn || column,
                annotation_level: annotationLevel,
                title: ruleId || ACTION_NAME,
                message: `${message}${ruleId ? `\nhttps://eslint.org/docs/rules/${ruleId}` : ''}`
            });
            consoleOutput.push(`${path}\n`);
            consoleOutput.push(`##[${consoleLevel}]  ${line}:${column}  ${consoleLevel}  ${message}  ${ruleId}\n\n`);
        }
    }
    console.log(consoleOutput.join(''));
    return {
        conclusion: errorCount > 0 ? 'failure' : 'success',
        output: {
            title: ACTION_NAME,
            summary: `${errorCount} error(s), ${warningCount} warning(s) found`,
            annotations
        }
    };
}
async function run() {
    const octokit = new github_1.GitHub(GITHUB_TOKEN);
    let currentSha;
    let info;
    let lintFiles;
    if (github_1.context.issue && github_1.context.issue.number) {
        try {
            info = await octokit.graphql(`query($owner: String!, $name: String!, $prNumber: Int!) {
				repository(owner: $owner, name: $name) {
					pullRequest(number: $prNumber) {
						files(first: 100) {
							nodes {
								path
							}
						}
						commits(last: 1) {
							nodes {
								commit {
									oid
								}
							}
						}
					}
				}
			}`, {
                owner: github_1.context.repo.owner,
                name: github_1.context.repo.repo,
                prNumber: github_1.context.issue.number
            });
        }
        catch {
            console.log('##[warning] Token doesn\'t have permission to access this resource.');
        }
        if (info) {
            currentSha = info.repository.pullRequest.commits.nodes[0].commit.oid;
            const files = info.repository.pullRequest.files.nodes;
            lintFiles = files.filter((file) => EXTENSIONS.has(path_1.extname(file.path)) && !file.path.includes('.d.ts')).map((f) => f.path);
        }
        else {
            currentSha = GITHUB_SHA;
        }
    }
    else {
        try {
            info = await octokit.repos.getCommit({ owner: github_1.context.repo.owner, repo: github_1.context.repo.repo, ref: GITHUB_SHA });
        }
        catch {
            console.log('##[warning] Token doesn\'t have permission to access this resource.');
        }
        if (info) {
            const files = info.data.files;
            lintFiles = files.filter(file => EXTENSIONS.has(path_1.extname(file.filename)) && !file.filename.includes('.d.ts') && file.status !== 'removed' && file.status !== 'changed').map(f => f.filename);
        }
        currentSha = GITHUB_SHA;
    }
    core_1.debug(`Commit: ${currentSha}`);
    let id;
    const jobName = core_1.getInput('job-name');
    if (jobName) {
        const checks = await octokit.checks.listForRef({
            ...github_1.context.repo,
            status: 'in_progress',
            ref: currentSha
        });
        const check = checks.data.check_runs.find(({ name }) => name.toLowerCase() === jobName.toLowerCase());
        if (check)
            id = check.id;
    }
    if (!id) {
        id = (await octokit.checks.create({
            ...github_1.context.repo,
            name: ACTION_NAME,
            head_sha: currentSha,
            status: 'in_progress',
            started_at: new Date().toISOString()
        })).data.id;
    }
    try {
        const lintAll = core_1.getInput('lint-all');
        const { conclusion, output } = await lint(lintAll ? null : lintFiles);
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            completed_at: new Date().toISOString(),
            conclusion,
            output
        });
        core_1.debug(output.summary);
        if (conclusion === 'failure')
            core_1.setFailed(output.summary);
    }
    catch (error) {
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            conclusion: 'failure',
            completed_at: new Date().toISOString()
        });
        core_1.setFailed(error.message);
    }
}
run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlcyI6WyJtYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXFDO0FBRXJDLDRDQUFrRDtBQUNsRCx3Q0FBMkQ7QUFFM0QsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRW5FLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUM3QixNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRTNDLEtBQUssVUFBVSxJQUFJLENBQUMsS0FBc0I7SUFDekMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLDJDQUFhLFdBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUscUJBQXFCLENBQUMsRUFBNEIsQ0FBQztJQUMxRyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQztRQUN6QixVQUFVLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUMzQixVQUFVLEVBQUUsWUFBWTtLQUN4QixDQUFDLENBQUM7SUFDSCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ3JELE1BQU0sTUFBTSxHQUE4RCxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0csTUFBTSxXQUFXLEdBQTBDLEVBQUUsQ0FBQztJQUM5RCxNQUFNLGFBQWEsR0FBYSxFQUFFLENBQUM7SUFDbkMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3QyxLQUFLLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBRTtRQUMx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QU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQzNCLEdBQUcsZ0JBQU8sQ0FBQyxJQUFJO1lBQ2YsWUFBWSxFQUFFLEVBQUU7WUFDaEIsWUFBWSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1lBQ3RDLFVBQVU7WUFDVixNQUFNO1NBQ04sQ0FBQyxDQUFDO1FBQ0gsWUFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixJQUFJLFVBQVUsS0FBSyxTQUFTO1lBQUUsZ0JBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDeEQ7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNmLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDM0IsR0FBRyxnQkFBTyxDQUFDLElBQUk7WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixVQUFVLEVBQUUsU0FBUztZQUNyQixZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO1FBQ0gsZ0JBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7QUFDRixDQUFDO0FBRUQsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luLCBleHRuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDaGVja3NVcGRhdGVQYXJhbXNPdXRwdXRBbm5vdGF0aW9ucywgQ2hlY2tzQ3JlYXRlUGFyYW1zIH0gZnJvbSAnQG9jdG9raXQvcmVzdCc7XG5pbXBvcnQgeyBHaXRIdWIsIGNvbnRleHQgfSBmcm9tICdAYWN0aW9ucy9naXRodWInO1xuaW1wb3J0IHsgZ2V0SW5wdXQsIHNldEZhaWxlZCwgZGVidWcgfSBmcm9tICdAYWN0aW9ucy9jb3JlJztcblxuY29uc3QgeyBHSVRIVUJfVE9LRU4sIEdJVEhVQl9TSEEsIEdJVEhVQl9XT1JLU1BBQ0UgfSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCBBQ1RJT05fTkFNRSA9ICdFU0xpbnQnO1xuY29uc3QgRVhURU5TSU9OUyA9IG5ldyBTZXQoWycudHMnLCAnLmpzJ10pO1xuXG5hc3luYyBmdW5jdGlvbiBsaW50KGZpbGVzOiBzdHJpbmdbXSB8IG51bGwpIHtcblx0Y29uc3QgeyBDTElFbmdpbmUgfSA9IGF3YWl0IGltcG9ydChqb2luKHByb2Nlc3MuY3dkKCksICdub2RlX21vZHVsZXMvZXNsaW50JykpIGFzIHR5cGVvZiBpbXBvcnQoJ2VzbGludCcpO1xuXHRjb25zdCBjbGkgPSBuZXcgQ0xJRW5naW5lKHtcblx0XHRleHRlbnNpb25zOiBbLi4uRVhURU5TSU9OU10sXG5cdFx0aWdub3JlUGF0aDogJy5naXRpZ25vcmUnXG5cdH0pO1xuXHRjb25zdCByZXBvcnQgPSBjbGkuZXhlY3V0ZU9uRmlsZXMoZmlsZXMgfHwgWydzcmMnXSk7XG5cdGNvbnN0IHsgcmVzdWx0cywgZXJyb3JDb3VudCwgd2FybmluZ0NvdW50IH0gPSByZXBvcnQ7XG5cdGNvbnN0IGxldmVsczogQ2hlY2tzVXBkYXRlUGFyYW1zT3V0cHV0QW5ub3RhdGlvbnNbJ2Fubm90YXRpb25fbGV2ZWwnXVtdID0gWydub3RpY2UnLCAnd2FybmluZycsICdmYWlsdXJlJ107XG5cdGNvbnN0IGFubm90YXRpb25zOiBDaGVja3NVcGRhdGVQYXJhbXNPdXRwdXRBbm5vdGF0aW9uc1tdID0gW107XG5cdGNvbnN0IGNvbnNvbGVPdXRwdXQ6IHN0cmluZ1tdID0gW107XG5cdGNvbnN0IGNvbnNvbGVMZXZlbHMgPSBbLCAnd2FybmluZycsICdlcnJvciddO1xuXHRmb3IgKGNvbnN0IHJlcyBvZiByZXN1bHRzKSB7XG5cdFx0Y29uc3QgeyBmaWxlUGF0aCwgbWVzc2FnZXMgfSA9IHJlcztcblx0XHRjb25zdCBwYXRoID0gZmlsZVBhdGguc3Vic3RyaW5nKEdJVEhVQl9XT1JLU1BBQ0UhLmxlbmd0aCArIDEpO1xuXHRcdGZvciAoY29uc3QgbXNnIG9mIG1lc3NhZ2VzKSB7XG5cdFx0XHRjb25zdCB7IGxpbmUsIGVuZExpbmUsIGNvbHVtbiwgZW5kQ29sdW1uLCBzZXZlcml0eSwgcnVsZUlkLCBtZXNzYWdlIH0gPSBtc2c7XG5cdFx0XHRjb25zdCBhbm5vdGF0aW9uTGV2ZWwgPSBsZXZlbHNbc2V2ZXJpdHldO1xuXHRcdFx0Y29uc3QgY29uc29sZUxldmVsID0gY29uc29sZUxldmVsc1tzZXZlcml0eV07XG5cdFx0XHRhbm5vdGF0aW9ucy5wdXNoKHtcblx0XHRcdFx0cGF0aCxcblx0XHRcdFx0c3RhcnRfbGluZTogbGluZSxcblx0XHRcdFx0ZW5kX2xpbmU6IGVuZExpbmUgfHwgbGluZSxcblx0XHRcdFx0c3RhcnRfY29sdW1uOiBjb2x1bW4sXG5cdFx0XHRcdGVuZF9jb2x1bW46IGVuZENvbHVtbiB8fCBjb2x1bW4sXG5cdFx0XHRcdGFubm90YXRpb25fbGV2ZWw6IGFubm90YXRpb25MZXZlbCxcblx0XHRcdFx0dGl0bGU6IHJ1bGVJZCB8fCBBQ1RJT05fTkFNRSxcblx0XHRcdFx0bWVzc2FnZTogYCR7bWVzc2FnZX0ke3J1bGVJZCA/IGBcXG5odHRwczovL2VzbGludC5vcmcvZG9jcy9ydWxlcy8ke3J1bGVJZH1gIDogJyd9YFxuXHRcdFx0fSk7XG5cdFx0XHRjb25zb2xlT3V0cHV0LnB1c2goYCR7cGF0aH1cXG5gKTtcblx0XHRcdGNvbnNvbGVPdXRwdXQucHVzaChgIyNbJHtjb25zb2xlTGV2ZWx9XSAgJHtsaW5lfToke2NvbHVtbn0gICR7Y29uc29sZUxldmVsfSAgJHttZXNzYWdlfSAgJHtydWxlSWR9XFxuXFxuYCk7XG5cdFx0fVxuXHR9XG5cdGNvbnNvbGUubG9nKGNvbnNvbGVPdXRwdXQuam9pbignJykpO1xuXG5cdHJldHVybiB7XG5cdFx0Y29uY2x1c2lvbjogZXJyb3JDb3VudCA+IDAgPyAnZmFpbHVyZScgOiAnc3VjY2VzcycgYXMgQ2hlY2tzQ3JlYXRlUGFyYW1zWydjb25jbHVzaW9uJ10sXG5cdFx0b3V0cHV0OiB7XG5cdFx0XHR0aXRsZTogQUNUSU9OX05BTUUsXG5cdFx0XHRzdW1tYXJ5OiBgJHtlcnJvckNvdW50fSBlcnJvcihzKSwgJHt3YXJuaW5nQ291bnR9IHdhcm5pbmcocykgZm91bmRgLFxuXHRcdFx0YW5ub3RhdGlvbnNcblx0XHR9XG5cdH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bigpIHtcblx0Y29uc3Qgb2N0b2tpdCA9IG5ldyBHaXRIdWIoR0lUSFVCX1RPS0VOISk7XG5cblx0bGV0IGN1cnJlbnRTaGE6IHN0cmluZztcblx0bGV0IGluZm87XG5cdGxldCBsaW50RmlsZXM7XG5cdGlmIChjb250ZXh0Lmlzc3VlICYmIGNvbnRleHQuaXNzdWUubnVtYmVyKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGluZm8gPSBhd2FpdCBvY3Rva2l0LmdyYXBocWwoYHF1ZXJ5KCRvd25lcjogU3RyaW5nISwgJG5hbWU6IFN0cmluZyEsICRwck51bWJlcjogSW50ISkge1xuXHRcdFx0XHRyZXBvc2l0b3J5KG93bmVyOiAkb3duZXIsIG5hbWU6ICRuYW1lKSB7XG5cdFx0XHRcdFx0cHVsbFJlcXVlc3QobnVtYmVyOiAkcHJOdW1iZXIpIHtcblx0XHRcdFx0XHRcdGZpbGVzKGZpcnN0OiAxMDApIHtcblx0XHRcdFx0XHRcdFx0bm9kZXMge1xuXHRcdFx0XHRcdFx0XHRcdHBhdGhcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y29tbWl0cyhsYXN0OiAxKSB7XG5cdFx0XHRcdFx0XHRcdG5vZGVzIHtcblx0XHRcdFx0XHRcdFx0XHRjb21taXQge1xuXHRcdFx0XHRcdFx0XHRcdFx0b2lkXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9YCxcblx0XHRcdHtcblx0XHRcdFx0b3duZXI6IGNvbnRleHQucmVwby5vd25lcixcblx0XHRcdFx0bmFtZTogY29udGV4dC5yZXBvLnJlcG8sXG5cdFx0XHRcdHByTnVtYmVyOiBjb250ZXh0Lmlzc3VlLm51bWJlclxuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCB7XG5cdFx0XHRjb25zb2xlLmxvZygnIyNbd2FybmluZ10gVG9rZW4gZG9lc25cXCd0IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZS4nKTtcblx0XHR9XG5cdFx0aWYgKGluZm8pIHtcblx0XHRcdGN1cnJlbnRTaGEgPSBpbmZvLnJlcG9zaXRvcnkucHVsbFJlcXVlc3QuY29tbWl0cy5ub2Rlc1swXS5jb21taXQub2lkO1xuXHRcdFx0Y29uc3QgZmlsZXMgPSBpbmZvLnJlcG9zaXRvcnkucHVsbFJlcXVlc3QuZmlsZXMubm9kZXM7XG5cdFx0XHRsaW50RmlsZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGU6IHsgcGF0aDogc3RyaW5nIH0pID0+IEVYVEVOU0lPTlMuaGFzKGV4dG5hbWUoZmlsZS5wYXRoKSkgJiYgIWZpbGUucGF0aC5pbmNsdWRlcygnLmQudHMnKSkubWFwKChmOiB7IHBhdGg6IHN0cmluZyB9KSA9PiBmLnBhdGgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50U2hhID0gR0lUSFVCX1NIQSE7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHRyeSB7XG5cdFx0XHRpbmZvID0gYXdhaXQgb2N0b2tpdC5yZXBvcy5nZXRDb21taXQoeyBvd25lcjogY29udGV4dC5yZXBvLm93bmVyLCByZXBvOiBjb250ZXh0LnJlcG8ucmVwbywgcmVmOiBHSVRIVUJfU0hBISB9KTtcblx0XHR9IGNhdGNoIHtcblx0XHRcdGNvbnNvbGUubG9nKCcjI1t3YXJuaW5nXSBUb2tlbiBkb2VzblxcJ3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyB0aGlzIHJlc291cmNlLicpO1xuXHRcdH1cblx0XHRpZiAoaW5mbykge1xuXHRcdFx0Y29uc3QgZmlsZXMgPSBpbmZvLmRhdGEuZmlsZXM7XG5cdFx0XHRsaW50RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiBFWFRFTlNJT05TLmhhcyhleHRuYW1lKGZpbGUuZmlsZW5hbWUpKSAmJiAhZmlsZS5maWxlbmFtZS5pbmNsdWRlcygnLmQudHMnKSAmJiBmaWxlLnN0YXR1cyAhPT0gJ3JlbW92ZWQnICYmIGZpbGUuc3RhdHVzICE9PSAnY2hhbmdlZCcpLm1hcChmID0+IGYuZmlsZW5hbWUpO1xuXHRcdH1cblx0XHRjdXJyZW50U2hhID0gR0lUSFVCX1NIQSE7XG5cdH1cblx0ZGVidWcoYENvbW1pdDogJHtjdXJyZW50U2hhfWApO1xuXG5cdGxldCBpZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXHRjb25zdCBqb2JOYW1lID0gZ2V0SW5wdXQoJ2pvYi1uYW1lJyk7XG5cdGlmIChqb2JOYW1lKSB7XG5cdFx0Y29uc3QgY2hlY2tzID0gYXdhaXQgb2N0b2tpdC5jaGVja3MubGlzdEZvclJlZih7XG5cdFx0XHQuLi5jb250ZXh0LnJlcG8sXG5cdFx0XHRzdGF0dXM6ICdpbl9wcm9ncmVzcycsXG5cdFx0XHRyZWY6IGN1cnJlbnRTaGFcblx0XHR9KTtcblx0XHRjb25zdCBjaGVjayA9IGNoZWNrcy5kYXRhLmNoZWNrX3J1bnMuZmluZCgoeyBuYW1lIH0pID0+IG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gam9iTmFtZS50b0xvd2VyQ2FzZSgpKTtcblx0XHRpZiAoY2hlY2spIGlkID0gY2hlY2suaWQ7XG5cdH1cblx0aWYgKCFpZCkge1xuXHRcdGlkID0gKGF3YWl0IG9jdG9raXQuY2hlY2tzLmNyZWF0ZSh7XG5cdFx0XHQuLi5jb250ZXh0LnJlcG8sXG5cdFx0XHRuYW1lOiBBQ1RJT05fTkFNRSxcblx0XHRcdGhlYWRfc2hhOiBjdXJyZW50U2hhLFxuXHRcdFx0c3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuXHRcdFx0c3RhcnRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG5cdFx0fSkpLmRhdGEuaWQ7XG5cdH1cblxuXHR0cnkge1xuXHRcdGNvbnN0IGxpbnRBbGwgPSBnZXRJbnB1dCgnbGludC1hbGwnKTtcblx0XHRjb25zdCB7IGNvbmNsdXNpb24sIG91dHB1dCB9ID0gYXdhaXQgbGludChsaW50QWxsID8gbnVsbCA6IGxpbnRGaWxlcyk7XG5cdFx0YXdhaXQgb2N0b2tpdC5jaGVja3MudXBkYXRlKHtcblx0XHRcdC4uLmNvbnRleHQucmVwbyxcblx0XHRcdGNoZWNrX3J1bl9pZDogaWQsXG5cdFx0XHRjb21wbGV0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcblx0XHRcdGNvbmNsdXNpb24sXG5cdFx0XHRvdXRwdXRcblx0XHR9KTtcblx0XHRkZWJ1ZyhvdXRwdXQuc3VtbWFyeSk7XG5cdFx0aWYgKGNvbmNsdXNpb24gPT09ICdmYWlsdXJlJykgc2V0RmFpbGVkKG91dHB1dC5zdW1tYXJ5KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRhd2FpdCBvY3Rva2l0LmNoZWNrcy51cGRhdGUoe1xuXHRcdFx0Li4uY29udGV4dC5yZXBvLFxuXHRcdFx0Y2hlY2tfcnVuX2lkOiBpZCxcblx0XHRcdGNvbmNsdXNpb246ICdmYWlsdXJlJyxcblx0XHRcdGNvbXBsZXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG5cdFx0fSk7XG5cdFx0c2V0RmFpbGVkKGVycm9yLm1lc3NhZ2UpO1xuXHR9XG59XG5cbnJ1bigpO1xuIl19