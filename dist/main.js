"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const github_1 = require("@actions/github");
const core_1 = require("@actions/core");
const { GITHUB_TOKEN, GITHUB_SHA, GITHUB_WORKSPACE } = process.env;
const ACTION_NAME = 'ESLint';
const EXTENSIONS = new Set(['.ts', '.js']);
async function lint(files) {
    const { CLIEngine } = await Promise.resolve().then(() => require(path_1.join(process.cwd(), 'node_modules/eslint')));
    const cli = new CLIEngine({
        extensions: [...EXTENSIONS],
        ignorePath: '.gitignore'
    });
    const report = cli.executeOnFiles(files || ['src']);
    const { results, errorCount, warningCount } = report;
    const levels = ['notice', 'warning', 'failure'];
    const annotations = [];
    for (const res of results) {
        const { filePath, messages } = res;
        const path = filePath.substring(GITHUB_WORKSPACE.length + 1);
        for (const msg of messages) {
            const { line, endLine, column, endColumn, severity, ruleId, message } = msg;
            const annotationLevel = levels[severity];
            annotations.push({
                path,
                start_line: line,
                end_line: endLine || line,
                start_column: column,
                end_column: endColumn || column,
                annotation_level: annotationLevel,
                title: ruleId || ACTION_NAME,
                message
            });
        }
    }
    return {
        conclusion: errorCount > 0 ? 'failure' : 'success',
        output: {
            title: ACTION_NAME,
            summary: `${errorCount} error(s), ${warningCount} warning(s) found`,
            annotations
        }
    };
}
async function run() {
    const octokit = new github_1.GitHub(GITHUB_TOKEN);
    let currentSha;
    let info;
    let lintFiles;
    if (github_1.context.issue && github_1.context.issue.number) {
        info = await octokit.graphql(`query($owner: String!, $name: String!, $prNumber: Int!) {
			repository(owner: $owner, name: $name) {
				pullRequest(number: $prNumber) {
					files(first: 100) {
						nodes {
							path
						}
					}
					commits(last: 1) {
						nodes {
							commit {
								oid
							}
						}
					}
				}
			}
		}`, {
            owner: github_1.context.repo.owner,
            name: github_1.context.repo.repo,
            prNumber: github_1.context.issue.number
        });
        currentSha = info.repository.pullRequest.commits.nodes[0].commit.oid;
        const files = info.repository.pullRequest.files.nodes;
        lintFiles = files.filter((file) => EXTENSIONS.has(path_1.extname(file.path)) && !file.path.includes('.d.ts')).map((f) => f.path);
    }
    else {
        info = await octokit.repos.getCommit({ owner: github_1.context.repo.owner, repo: github_1.context.repo.repo, ref: GITHUB_SHA });
        currentSha = GITHUB_SHA;
        const files = info.data.files;
        lintFiles = files.filter(file => EXTENSIONS.has(path_1.extname(file.filename)) && !file.filename.includes('.d.ts') && file.status !== 'removed' && file.status !== 'changed').map(f => f.filename);
    }
    core_1.debug(`Commit: ${currentSha}`);
    let id;
    const jobName = core_1.getInput('job-name');
    if (jobName) {
        const checks = await octokit.checks.listForRef({
            ...github_1.context.repo,
            status: 'in_progress',
            ref: currentSha
        });
        const check = checks.data.check_runs.find(({ name }) => name.toLowerCase() === jobName.toLowerCase());
        if (check)
            id = check.id;
    }
    if (!id) {
        id = (await octokit.checks.create({
            ...github_1.context.repo,
            name: ACTION_NAME,
            head_sha: currentSha,
            status: 'in_progress',
            started_at: new Date().toISOString()
        })).data.id;
    }
    try {
        const lintAll = core_1.getInput('lint-all');
        const { conclusion, output } = await lint(lintAll ? null : lintFiles);
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            completed_at: new Date().toISOString(),
            conclusion,
            output
        });
        core_1.debug(output.summary);
        if (conclusion === 'failure')
            core_1.setFailed(output.summary);
    }
    catch (error) {
        await octokit.checks.update({
            ...github_1.context.repo,
            check_run_id: id,
            conclusion: 'failure',
            completed_at: new Date().toISOString()
        });
        core_1.setFailed(error.message);
    }
}
run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlcyI6WyJtYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQXFDO0FBRXJDLDRDQUFrRDtBQUNsRCx3Q0FBMkQ7QUFFM0QsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRW5FLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQztBQUM3QixNQUFNLFVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRTNDLEtBQUssVUFBVSxJQUFJLENBQUMsS0FBc0I7SUFDekMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLDJDQUFhLFdBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUscUJBQXFCLENBQUMsRUFBNEIsQ0FBQztJQUMxRyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQztRQUN6QixVQUFVLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUMzQixVQUFVLEVBQUUsWUFBWTtLQUN4QixDQUFDLENBQUM7SUFDSCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ3JELE1BQU0sTUFBTSxHQUE4RCxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0csTUFBTSxXQUFXLEdBQTBDLEVBQUUsQ0FBQztJQUM5RCxLQUFLLE1BQU0sR0FBRyxJQUFJLE9BQU8sRUFBRTtRQUMxQixNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNuQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFD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LEVBQUU7U0FDcEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztLQUNaO0lBRUQsSUFBSTtRQUNILE1BQU0sT0FBTyxHQUFHLGVBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0RSxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQzNCLEdBQUcsZ0JBQU8sQ0FBQyxJQUFJO1lBQ2YsWUFBWSxFQUFFLEVBQUU7WUFDaEIsWUFBWSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1lBQ3RDLFVBQVU7WUFDVixNQUFNO1NBQ04sQ0FBQyxDQUFDO1FBQ0gsWUFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0QixJQUFJLFVBQVUsS0FBSyxTQUFTO1lBQUUsZ0JBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDeEQ7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNmLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDM0IsR0FBRyxnQkFBTyxDQUFDLElBQUk7WUFDZixZQUFZLEVBQUUsRUFBRTtZQUNoQixVQUFVLEVBQUUsU0FBUztZQUNyQixZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO1FBQ0gsZ0JBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekI7QUFDRixDQUFDO0FBRUQsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqb2luLCBleHRuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDaGVja3NVcGRhdGVQYXJhbXNPdXRwdXRBbm5vdGF0aW9ucywgQ2hlY2tzQ3JlYXRlUGFyYW1zIH0gZnJvbSAnQG9jdG9raXQvcmVzdCc7XG5pbXBvcnQgeyBHaXRIdWIsIGNvbnRleHQgfSBmcm9tICdAYWN0aW9ucy9naXRodWInO1xuaW1wb3J0IHsgZ2V0SW5wdXQsIHNldEZhaWxlZCwgZGVidWcgfSBmcm9tICdAYWN0aW9ucy9jb3JlJztcblxuY29uc3QgeyBHSVRIVUJfVE9LRU4sIEdJVEhVQl9TSEEsIEdJVEhVQl9XT1JLU1BBQ0UgfSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCBBQ1RJT05fTkFNRSA9ICdFU0xpbnQnO1xuY29uc3QgRVhURU5TSU9OUyA9IG5ldyBTZXQoWycudHMnLCAnLmpzJ10pO1xuXG5hc3luYyBmdW5jdGlvbiBsaW50KGZpbGVzOiBzdHJpbmdbXSB8IG51bGwpIHtcblx0Y29uc3QgeyBDTElFbmdpbmUgfSA9IGF3YWl0IGltcG9ydChqb2luKHByb2Nlc3MuY3dkKCksICdub2RlX21vZHVsZXMvZXNsaW50JykpIGFzIHR5cGVvZiBpbXBvcnQoJ2VzbGludCcpO1xuXHRjb25zdCBjbGkgPSBuZXcgQ0xJRW5naW5lKHtcblx0XHRleHRlbnNpb25zOiBbLi4uRVhURU5TSU9OU10sXG5cdFx0aWdub3JlUGF0aDogJy5naXRpZ25vcmUnXG5cdH0pO1xuXHRjb25zdCByZXBvcnQgPSBjbGkuZXhlY3V0ZU9uRmlsZXMoZmlsZXMgfHwgWydzcmMnXSk7XG5cdGNvbnN0IHsgcmVzdWx0cywgZXJyb3JDb3VudCwgd2FybmluZ0NvdW50IH0gPSByZXBvcnQ7XG5cdGNvbnN0IGxldmVsczogQ2hlY2tzVXBkYXRlUGFyYW1zT3V0cHV0QW5ub3RhdGlvbnNbJ2Fubm90YXRpb25fbGV2ZWwnXVtdID0gWydub3RpY2UnLCAnd2FybmluZycsICdmYWlsdXJlJ107XG5cdGNvbnN0IGFubm90YXRpb25zOiBDaGVja3NVcGRhdGVQYXJhbXNPdXRwdXRBbm5vdGF0aW9uc1tdID0gW107XG5cdGZvciAoY29uc3QgcmVzIG9mIHJlc3VsdHMpIHtcblx0XHRjb25zdCB7IGZpbGVQYXRoLCBtZXNzYWdlcyB9ID0gcmVzO1xuXHRcdGNvbnN0IHBhdGggPSBmaWxlUGF0aC5zdWJzdHJpbmcoR0lUSFVCX1dPUktTUEFDRSEubGVuZ3RoICsgMSk7XG5cdFx0Zm9yIChjb25zdCBtc2cgb2YgbWVzc2FnZXMpIHtcblx0XHRcdGNvbnN0IHsgbGluZSwgZW5kTGluZSwgY29sdW1uLCBlbmRDb2x1bW4sIHNldmVyaXR5LCBydWxlSWQsIG1lc3NhZ2UgfSA9IG1zZztcblx0XHRcdGNvbnN0IGFubm90YXRpb25MZXZlbCA9IGxldmVsc1tzZXZlcml0eV07XG5cdFx0XHRhbm5vdGF0aW9ucy5wdXNoKHtcblx0XHRcdFx0cGF0aCxcblx0XHRcdFx0c3RhcnRfbGluZTogbGluZSxcblx0XHRcdFx0ZW5kX2xpbmU6IGVuZExpbmUgfHwgbGluZSxcblx0XHRcdFx0c3RhcnRfY29sdW1uOiBjb2x1bW4sXG5cdFx0XHRcdGVuZF9jb2x1bW46IGVuZENvbHVtbiB8fCBjb2x1bW4sXG5cdFx0XHRcdGFubm90YXRpb25fbGV2ZWw6IGFubm90YXRpb25MZXZlbCxcblx0XHRcdFx0dGl0bGU6IHJ1bGVJZCB8fCBBQ1RJT05fTkFNRSxcblx0XHRcdFx0bWVzc2FnZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRjb25jbHVzaW9uOiBlcnJvckNvdW50ID4gMCA/ICdmYWlsdXJlJyA6ICdzdWNjZXNzJyBhcyBDaGVja3NDcmVhdGVQYXJhbXNbJ2NvbmNsdXNpb24nXSxcblx0XHRvdXRwdXQ6IHtcblx0XHRcdHRpdGxlOiBBQ1RJT05fTkFNRSxcblx0XHRcdHN1bW1hcnk6IGAke2Vycm9yQ291bnR9IGVycm9yKHMpLCAke3dhcm5pbmdDb3VudH0gd2FybmluZyhzKSBmb3VuZGAsXG5cdFx0XHRhbm5vdGF0aW9uc1xuXHRcdH1cblx0fTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuKCkge1xuXHRjb25zdCBvY3Rva2l0ID0gbmV3IEdpdEh1YihHSVRIVUJfVE9LRU4hKTtcblxuXHRsZXQgY3VycmVudFNoYTogc3RyaW5nO1xuXHRsZXQgaW5mbztcblx0bGV0IGxpbnRGaWxlcztcblx0aWYgKGNvbnRleHQuaXNzdWUgJiYgY29udGV4dC5pc3N1ZS5udW1iZXIpIHtcblx0XHRpbmZvID0gYXdhaXQgb2N0b2tpdC5ncmFwaHFsKGBxdWVyeSgkb3duZXI6IFN0cmluZyEsICRuYW1lOiBTdHJpbmchLCAkcHJOdW1iZXI6IEludCEpIHtcblx0XHRcdHJlcG9zaXRvcnkob3duZXI6ICRvd25lciwgbmFtZTogJG5hbWUpIHtcblx0XHRcdFx0cHVsbFJlcXVlc3QobnVtYmVyOiAkcHJOdW1iZXIpIHtcblx0XHRcdFx0XHRmaWxlcyhmaXJzdDogMTAwKSB7XG5cdFx0XHRcdFx0XHRub2RlcyB7XG5cdFx0XHRcdFx0XHRcdHBhdGhcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29tbWl0cyhsYXN0OiAxKSB7XG5cdFx0XHRcdFx0XHRub2RlcyB7XG5cdFx0XHRcdFx0XHRcdGNvbW1pdCB7XG5cdFx0XHRcdFx0XHRcdFx0b2lkXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9YCxcblx0XHR7XG5cdFx0XHRvd25lcjogY29udGV4dC5yZXBvLm93bmVyLFxuXHRcdFx0bmFtZTogY29udGV4dC5yZXBvLnJlcG8sXG5cdFx0XHRwck51bWJlcjogY29udGV4dC5pc3N1ZS5udW1iZXJcblx0XHR9KTtcblx0XHRjdXJyZW50U2hhID0gaW5mby5yZXBvc2l0b3J5LnB1bGxSZXF1ZXN0LmNvbW1pdHMubm9kZXNbMF0uY29tbWl0Lm9pZDtcblx0XHRjb25zdCBmaWxlcyA9IGluZm8ucmVwb3NpdG9yeS5wdWxsUmVxdWVzdC5maWxlcy5ub2Rlcztcblx0XHRsaW50RmlsZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGU6IHsgcGF0aDogc3RyaW5nIH0pID0+IEVYVEVOU0lPTlMuaGFzKGV4dG5hbWUoZmlsZS5wYXRoKSkgJiYgIWZpbGUucGF0aC5pbmNsdWRlcygnLmQudHMnKSkubWFwKChmOiB7IHBhdGg6IHN0cmluZyB9KSA9PiBmLnBhdGgpO1xuXHR9IGVsc2Uge1xuXHRcdGluZm8gPSBhd2FpdCBvY3Rva2l0LnJlcG9zLmdldENvbW1pdCh7IG93bmVyOiBjb250ZXh0LnJlcG8ub3duZXIsIHJlcG86IGNvbnRleHQucmVwby5yZXBvLCByZWY6IEdJVEhVQl9TSEEhIH0pO1xuXHRcdGN1cnJlbnRTaGEgPSBHSVRIVUJfU0hBITtcblx0XHRjb25zdCBmaWxlcyA9IGluZm8uZGF0YS5maWxlcztcblx0XHRsaW50RmlsZXMgPSBmaWxlcy5maWx0ZXIoZmlsZSA9PiBFWFRFTlNJT05TLmhhcyhleHRuYW1lKGZpbGUuZmlsZW5hbWUpKSAmJiAhZmlsZS5maWxlbmFtZS5pbmNsdWRlcygnLmQudHMnKSAmJiBmaWxlLnN0YXR1cyAhPT0gJ3JlbW92ZWQnICYmIGZpbGUuc3RhdHVzICE9PSAnY2hhbmdlZCcpLm1hcChmID0+IGYuZmlsZW5hbWUpO1xuXHR9XG5cdGRlYnVnKGBDb21taXQ6ICR7Y3VycmVudFNoYX1gKTtcblxuXHRsZXQgaWQ6IG51bWJlciB8IHVuZGVmaW5lZDtcblx0Y29uc3Qgam9iTmFtZSA9IGdldElucHV0KCdqb2ItbmFtZScpO1xuXHRpZiAoam9iTmFtZSkge1xuXHRcdGNvbnN0IGNoZWNrcyA9IGF3YWl0IG9jdG9raXQuY2hlY2tzLmxpc3RGb3JSZWYoe1xuXHRcdFx0Li4uY29udGV4dC5yZXBvLFxuXHRcdFx0c3RhdHVzOiAnaW5fcHJvZ3Jlc3MnLFxuXHRcdFx0cmVmOiBjdXJyZW50U2hhXG5cdFx0fSk7XG5cdFx0Y29uc3QgY2hlY2sgPSBjaGVja3MuZGF0YS5jaGVja19ydW5zLmZpbmQoKHsgbmFtZSB9KSA9PiBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IGpvYk5hbWUudG9Mb3dlckNhc2UoKSk7XG5cdFx0aWYgKGNoZWNrKSBpZCA9IGNoZWNrLmlkO1xuXHR9XG5cdGlmICghaWQpIHtcblx0XHRpZCA9IChhd2FpdCBvY3Rva2l0LmNoZWNrcy5jcmVhdGUoe1xuXHRcdFx0Li4uY29udGV4dC5yZXBvLFxuXHRcdFx0bmFtZTogQUNUSU9OX05BTUUsXG5cdFx0XHRoZWFkX3NoYTogY3VycmVudFNoYSxcblx0XHRcdHN0YXR1czogJ2luX3Byb2dyZXNzJyxcblx0XHRcdHN0YXJ0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuXHRcdH0pKS5kYXRhLmlkO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRjb25zdCBsaW50QWxsID0gZ2V0SW5wdXQoJ2xpbnQtYWxsJyk7XG5cdFx0Y29uc3QgeyBjb25jbHVzaW9uLCBvdXRwdXQgfSA9IGF3YWl0IGxpbnQobGludEFsbCA/IG51bGwgOiBsaW50RmlsZXMpO1xuXHRcdGF3YWl0IG9jdG9raXQuY2hlY2tzLnVwZGF0ZSh7XG5cdFx0XHQuLi5jb250ZXh0LnJlcG8sXG5cdFx0XHRjaGVja19ydW5faWQ6IGlkLFxuXHRcdFx0Y29tcGxldGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG5cdFx0XHRjb25jbHVzaW9uLFxuXHRcdFx0b3V0cHV0XG5cdFx0fSk7XG5cdFx0ZGVidWcob3V0cHV0LnN1bW1hcnkpO1xuXHRcdGlmIChjb25jbHVzaW9uID09PSAnZmFpbHVyZScpIHNldEZhaWxlZChvdXRwdXQuc3VtbWFyeSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0YXdhaXQgb2N0b2tpdC5jaGVja3MudXBkYXRlKHtcblx0XHRcdC4uLmNvbnRleHQucmVwbyxcblx0XHRcdGNoZWNrX3J1bl9pZDogaWQsXG5cdFx0XHRjb25jbHVzaW9uOiAnZmFpbHVyZScsXG5cdFx0XHRjb21wbGV0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuXHRcdH0pO1xuXHRcdHNldEZhaWxlZChlcnJvci5tZXNzYWdlKTtcblx0fVxufVxuXG5ydW4oKTtcbiJdfQ==